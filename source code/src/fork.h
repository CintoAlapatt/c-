

#ifndef _FORK_H
#define _FORK_H

#include"Types.h"

// A fork, or whatever shape.

// verts
int forkNormalIndices[] = { 
 2, 3, 4, 3, 5, 6, 3, 5, 7, 8, 1, 3, 9, 7, 3, 3, 6, 10, 3, 9, 11, 12, 8, 3, 3, 10, 13, 3, 12, 11, 14, 5, 4, 13, 4, 15, 14, 16, 17, 14, 16, 18, 19, 13, 14, 20, 18, 14, 14, 17, 21, 14, 20, 22, 23, 19, 14, 24, 22, 14, 14, 21, 25, 24, 23, 14, 16, 2, 26, 16, 25, 27, 15, 3, 2, 15, 2, 16, 23, 24, 28, 23, 27, 29, 17, 1, 7, 17, 7, 20, 24, 11, 30, 24, 29, 27, 21, 8, 11, 21, 11, 24, 11, 12, 31, 11, 30, 29, 23, 12, 10, 23, 10, 22, 8, 21, 32, 8, 31, 33, 19, 9, 6, 19, 6, 18, 34, 35, 36, 33, 35, 37, 26, 25, 38, 26, 37, 39, 40, 41, 32, 39, 32, 31, 27, 29, 30, 27, 30, 28, 42, 43, 44, 41, 43, 45, 12, 23, 28, 12, 28, 30, 10, 9, 43, 10, 43, 42, 22, 10, 42, 22, 42, 41, 17, 16, 26, 17, 26, 38, 21, 20, 39, 21, 39, 31, 5, 13, 36, 5, 36, 35, 9, 19, 44, 9, 44, 43, 2, 1, 37, 2, 37, 25, 13, 18, 33, 13, 33, 36, 18, 6, 34, 18, 34, 33, 1, 17, 38, 1, 38, 37, 7, 8, 32, 7, 32, 40, 20, 7, 40, 20, 40, 39, 6, 5, 35, 6, 35, 34, 19, 22, 41, 19, 41, 44, 14, 4, 46, 14, 45, 47, 3, 15, 48, 3, 47, 49, 4, 3, 48, 4, 48, 45, 15, 14, 46, 15, 46, 47, 47, 46, 50, 47, 49, 51, 48, 47, 50, 48, 50, 52, 46, 45, 53, 46, 52, 49, 45, 48, 51, 45, 51, 52, 52, 51, 54, 52, 53, 55, 50, 49, 56, 50, 55, 57, 51, 50, 56, 51, 56, 53, 49, 52, 54, 49, 54, 55, 53, 56, 58, 53, 57, 59, 60, 61, 58, 59, 58, 57, 55, 54, 60, 55, 60, 59, 56, 55, 59, 56, 59, 57, 54, 53, 58, 54, 58, 60 
 };

int forkNormalIndicesLength = sizeof(forkNormalIndices) / sizeof(int);



// normals for the verts
Vertex forkVertices[] = { 
 {1.000000f, 1.000000f, -4.365348f}, {1.000000f, 1.000000f, -6.365348f}, {1.000000f, -1.000000f, -4.365348f}, {1.000000f, -1.000000f, -6.365348f}, {-1.000000f, 0.695390f, -5.706685f}, {-1.000000f, 0.695390f, -7.706685f}, {-1.000000f, -0.695390f, -5.706685f}, {-1.000000f, -0.695390f, -7.706685f}, {1.000000f, 0.777778f, -4.365348f}, {1.000000f, 0.555556f, -4.365348f}, {1.000000f, 0.333333f, -4.365348f}, {1.000000f, 0.111111f, -4.365348f}, {1.000000f, -0.111111f, -4.365348f}, {1.000000f, -0.333333f, -4.365348f}, {1.000000f, -0.555556f, -4.365348f}, {1.000000f, -0.777778f, -4.365348f}, {1.000000f, -0.777778f, -6.365348f}, {1.000000f, -0.555556f, -6.365348f}, {1.000000f, -0.333333f, -6.365348f}, {1.000000f, -0.111111f, -6.365348f}, {1.000000f, 0.111111f, -6.365348f}, {1.000000f, 0.333333f, -6.365348f}, {1.000000f, 0.555556f, -6.365348f}, {1.000000f, 0.777778f, -6.365348f}, {3.730018f, 0.830334f, 0.689168f}, {3.730018f, 0.830334f, -0.689168f}, {3.730018f, -0.830334f, 0.689168f}, {3.730018f, -0.830334f, -0.689168f}, {3.730018f, -0.645815f, 0.689168f}, {3.730018f, 0.645815f, -0.689168f}, {3.730018f, 0.645815f, 0.689168f}, {3.730018f, 0.461297f, 0.689168f}, {3.730018f, 0.276778f, 0.689168f}, {3.730018f, 0.092259f, 0.689168f}, {3.730018f, -0.092259f, 0.689168f}, {3.730018f, -0.276778f, 0.689168f}, {3.730018f, -0.461297f, 0.689168f}, {3.730018f, -0.645815f, -0.689168f}, {3.730018f, -0.461297f, -0.689168f}, {3.730018f, -0.276778f, -0.689168f}, {3.730018f, -0.092259f, -0.689168f}, {3.730018f, 0.092259f, -0.689168f}, {3.730018f, 0.276778f, -0.689168f}, {3.730018f, 0.461297f, -0.689168f}, {-1.794121f, 0.064457f, 4.521009f}, {-1.794121f, 0.064457f, 2.521010f}, {-1.794121f, -0.274837f, 4.521009f}, {-1.794121f, -0.274837f, 2.521010f}, {-10.048362f, 0.476051f, 1.000000f}, {-10.048362f, 0.476051f, -1.000000f}, {-10.048362f, -0.476051f, 1.000000f}, {-10.048362f, -0.476051f, -1.000000f}, {-10.730336f, 0.248977f, 3.850341f}, {-10.730336f, 0.248977f, 1.850341f}, {-10.730336f, -0.248977f, 3.850341f}, {-10.730336f, -0.248977f, 1.850341f}, {-10.723773f, 0.248977f, 3.850341f}, {-10.723773f, 0.248977f, 1.850341f}, {-10.723773f, -0.248977f, 3.850341f}, {-10.723773f, -0.248977f, 1.850341f} 
 };

int forkVerticesLength = sizeof(forkVertices) / sizeof(Vertex);



// Each group of three entries specifying a triangle for the shape
Normal forkNormals[] = { 
 {-0.463711f, 0.781325f, 0.417735f}, {0.512079f, 0.695557f, -0.503961f}, {-0.463711f, -0.781325f, 0.417735f}, {0.512079f, -0.695556f, -0.503961f}, {-0.328566f, 0.894743f, 0.302455f}, {-0.383573f, 0.524013f, -0.760449f}, {-0.225694f, -0.928865f, 0.293721f}, {-0.383302f, -0.523727f, -0.760782f}, {-0.370854f, -0.573452f, 0.730493f}, {-0.322846f, 0.586703f, 0.742664f}, {-0.355079f, -0.578345f, 0.734463f}, {-0.339071f, 0.582757f, 0.738529f}, {-0.339080f, -0.582743f, 0.738536f}, {-0.355087f, 0.578331f, 0.734470f}, {-0.322846f, -0.586703f, 0.742664f}, {-0.370854f, 0.573452f, 0.730493f}, {0.817935f, 0.077454f, -0.570073f}, {0.819473f, -0.077530f, -0.567850f}, {0.818461f, 0.077492f, -0.569313f}, {0.818969f, -0.077516f, -0.568578f}, {0.818964f, 0.077514f, -0.568585f}, {0.818456f, -0.077490f, -0.569320f}, {0.819473f, 0.077530f, -0.567850f}, {0.817935f, -0.077454f, -0.570073f}, {0.208544f, 0.533564f, 0.819645f}, {0.753199f, 0.636983f, -0.164145f}, {0.208544f, -0.533565f, 0.819645f}, {0.753199f, -0.636983f, -0.164145f}, {0.204227f, 0.546636f, 0.812084f}, {0.715273f, -0.678019f, -0.169337f}, {0.204227f, -0.546636f, 0.812084f}, {0.207479f, 0.536853f, 0.817766f}, {0.205320f, -0.543389f, 0.813985f}, {0.206404f, 0.540128f, 0.815879f}, {0.206404f, -0.540128f, 0.815879f}, {0.205320f, 0.543389f, 0.813985f}, {0.207479f, -0.536853f, 0.817766f}, {0.715273f, 0.678019f, -0.169337f}, {0.743973f, -0.647432f, -0.165336f}, {0.724994f, 0.667969f, -0.167932f}, {0.734566f, -0.657767f, -0.166598f}, {0.734566f, 0.657767f, -0.166598f}, {0.724994f, -0.667969f, -0.167932f}, {0.743973f, 0.647432f, -0.165336f}, {0.436969f, 0.549239f, 0.712317f}, {-0.514748f, 0.803914f, -0.297922f}, {0.432695f, -0.555704f, 0.709907f}, {-0.431840f, -0.853848f, -0.290617f}, {0.007550f, 0.937528f, 0.347829f}, {-0.363230f, 0.582234f, -0.727370f}, {-0.004241f, -0.936199f, 0.351446f}, {-0.368146f, -0.576884f, -0.729159f}, {0.648967f, -0.568777f, -0.505307f}, {-0.833182f, 0.389079f, 0.392970f}, {0.648967f, 0.568777f, -0.505307f}, {-0.833182f, -0.389079f, 0.392970f}, {-0.577350f, -0.577350f, -0.577350f}, {-0.577350f, -0.577350f, 0.577350f}, {-0.577350f, 0.577350f, -0.577350f}, {-0.577350f, 0.577350f, 0.577350f} 
 };

int forkNormalsLength = sizeof(forkNormals) / sizeof(Normal);


// Each group of three indices specifying the normal used to create a single averaged vertex normal
int forkElements[] = { 
 8, 0, 4, 4, 6, 2, 4, 2, 15, 9, 8, 4, 10, 9, 4, 4, 15, 14, 4, 14, 13, 11, 10, 4, 4, 13, 12, 4, 12, 11, 3, 2, 6, 3, 6, 7, 7, 5, 1, 7, 1, 23, 16, 3, 7, 17, 16, 7, 7, 23, 22, 7, 22, 21, 18, 17, 7, 19, 18, 7, 7, 21, 20, 20, 19, 7, 1, 0, 24, 1, 24, 25, 5, 4, 0, 5, 0, 1, 19, 20, 41, 19, 41, 40, 23, 8, 9, 23, 9, 22, 20, 11, 33, 20, 33, 41, 21, 10, 11, 21, 11, 20, 11, 12, 34, 11, 34, 33, 19, 12, 13, 19, 13, 18, 10, 21, 42, 10, 42, 32, 17, 14, 15, 17, 15, 16, 37, 28, 26, 37, 26, 27, 25, 24, 30, 25, 30, 29, 43, 31, 32, 43, 32, 42, 41, 33, 34, 41, 34, 40, 39, 35, 36, 39, 36, 38, 12, 19, 40, 12, 40, 34, 13, 14, 36, 13, 36, 35, 18, 13, 35, 18, 35, 39, 23, 1, 25, 23, 25, 29, 21, 22, 43, 21, 43, 42, 2, 3, 27, 2, 27, 26, 14, 17, 38, 14, 38, 36, 0, 8, 30, 0, 30, 24, 3, 16, 37, 3, 37, 27, 16, 15, 28, 16, 28, 37, 8, 23, 29, 8, 29, 30, 9, 10, 32, 9, 32, 31, 22, 9, 31, 22, 31, 43, 15, 2, 26, 15, 26, 28, 17, 18, 39, 17, 39, 38, 7, 6, 46, 7, 46, 47, 4, 5, 45, 4, 45, 44, 6, 4, 44, 6, 44, 46, 5, 7, 47, 5, 47, 45, 45, 47, 51, 45, 51, 49, 44, 45, 49, 44, 49, 48, 47, 46, 50, 47, 50, 51, 46, 44, 48, 46, 48, 50, 50, 48, 52, 50, 52, 54, 49, 51, 55, 49, 55, 53, 48, 49, 53, 48, 53, 52, 51, 50, 54, 51, 54, 55, 52, 53, 57, 52, 57, 56, 59, 58, 56, 59, 56, 57, 55, 54, 58, 55, 58, 59, 53, 55, 59, 53, 59, 57, 54, 52, 56, 54, 56, 58 
 };

int forkElementsLength = sizeof(forkElements) / sizeof(int);


#endif

